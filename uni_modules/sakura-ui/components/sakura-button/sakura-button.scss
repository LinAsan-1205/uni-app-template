@use "sass:map";
@use "sass:color";
@use "../../libs/styles/design" as *;
$button: () !default;
$button: map.merge(
	(
		color: get-base-color-var('black'),
		color-plain: get-base-color-var('black'),
		bg-color: get-base-color-var('white'),
		border-color-base: get-css-var('border-color-base')
	),
	$button
);

.#{$namespace}-button {
	position: relative;
	margin: 0px;
	border-radius: 0;
	overflow: visible;
	/* #ifndef MP-WEIXIN */
	display: inline-flex;
	/* #endif */
	/* #ifdef MP-WEIXIN */
	display: flex;
	/* #endif */
	align-items: center;
	justify-content: center;
	color: get-css-var('button-color');
	background-color: get-css-var('button-bg-color');
	&-content {
		display: flex;
		align-items: center;
		justify-content: center;
	}
	&--var {
		--#{$namespace}-border-color-base: #e5e5e5;
		@include define-preset-values('button', $button);
	}

	@mixin define-button-style($style-map) {
		@include define-preset-style('button', $style-map);
	}

	@each $type in $types {
		&--#{$type} {
			@include define-button-style(
				(
					color: 'color-white-base',
					bg-color: 'color' $type 'base',
					border-color-base: 'color' $type 'base',
					color-plain: 'color' $type 'base',
					shadow: 'color' $type 'base'
				)
			);
			.#{$namespace}-button--loading {
				$colors: map.get($color-map, $type, 'base');
				background: color.change($colors, $alpha: 0.8);
			}
		}
	}
	&[disabled]:not([type]) {
		background: get-css-var('button-bg-color');
		color: get-css-var('button-color');
		opacity: 0.8;
	}

	&::after {
		content: ' ';
		width: 200%;
		height: 200%;
		position: absolute;
		top: 0;
		left: 0;
		border-radius: 0;
		transform: scale(0.5) translateZ(0);
		transform-origin: 0 0;
		box-sizing: border-box;
		border: 1px solid get-css-var('button-border-color-base');
	}
	&--shadow {
		box-shadow: 0 8px 20px -6px get-css-var('button-shadow');
		&:after {
			opacity: 0;
		}
	}
	&--plain {
		background-color: transparent !important;
		overflow: visible;
		color: get-css-var('button-color-plain');
	}
	&--disabled {
		position: absolute;
		left: 0;
		right: 0;
		top: 0;
		bottom: 0;
		opacity: 0.5;
		background-color: rgba(255, 255, 255, 0.5);
	}
	&--round {
		border-radius: 24rpx;
		overflow: hidden;
		&:after {
			border-radius: 24rpx;
		}
		&--border {
			overflow: visible;
		}
		&--size {
			&:after {
				// border-radius: 0;
				// border: none;
			}
		}
	}
	&--block {
		width: 100%;
	}
	&--icon {
		padding: 16rpx;
		&::after {
			display: none;
		}
	}
	&--border {
		&:after {
			display: none;
		}
	}
	&--loading {
		width: 100%;
		height: 100%;
		position: absolute;
		top: 0;
		left: 0;
		border-radius: inherit;
		display: flex;
		align-items: center;
		justify-content: center;
		z-index: 999;
	}
}
